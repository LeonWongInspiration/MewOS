     1 00000000                                 ; Asm functions
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; Mode of file
     5 00000000                                 [INSTRSET "i486p"]
     6 00000000                                 [BITS 32]						; 32-bit system instructions
     7 00000000                                 
     8 00000000                                 ; File info
     9 00000000                                 
    10 00000000                                 [FILE "asm_funcs.nas"]			; Source file
    11 00000000                                 
    12 00000000                                 		GLOBAL	_io_hlt			; Function declaration
    13 00000000                                 		GLOBAL	_io_cli
    14 00000000                                 		GLOBAL	_io_sti
    15 00000000                                 		GLOBAL	_io_stihlt
    16 00000000                                 		GLOBAL	_io_in8
    17 00000000                                 		GLOBAL  _io_in16
    18 00000000                                 		GLOBAL  _io_in32
    19 00000000                                 		GLOBAL	_io_out8
    20 00000000                                 		GLOBAL 	_io_out16
    21 00000000                                 		GLOBAL 	_io_out32
    22 00000000                                 		GLOBAL	_io_load_eflags
    23 00000000                                 		GLOBAL	_io_store_eflags
    24 00000000                                 		GLOBAL	_load_gdtr
    25 00000000                                 		GLOBAL	_load_idtr
    26 00000000                                 
    27 00000000                                 ; Function realization
    28 00000000                                 
    29                                          [SECTION .text]		; Write this before the program
    30 00000000                                 
    31 00000000                                 _io_hlt:	; void io_hlt(void);
    32 00000000 F4                              		HLT
    33 00000001 C3                              		RET
    34 00000002                                 
    35 00000002                                 _io_cli:	; void io_cli(void);
    36 00000002 FA                              		CLI
    37 00000003 C3                              		RET
    38 00000004                                 
    39 00000004                                 _io_sti:	; void io_sti(void);
    40 00000004 FB                              		STI
    41 00000005 C3                              		RET
    42 00000006                                 
    43 00000006                                 _io_stihlt:	; void io_stihlt(void);
    44 00000006 FB                              		STI
    45 00000007 F4                              		HLT
    46 00000008 C3                              		RET
    47 00000009                                 
    48 00000009                                 _io_in8:	; int io_in8(int port);
    49 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 0000000D B8 00000000                     		MOV		EAX,0
    51 00000012 EC                              		IN		AL,DX
    52 00000013 C3                              		RET
    53 00000014                                 
    54 00000014                                 _io_in16:	; int io_in16(int port);
    55 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000018 B8 00000000                     		MOV		EAX,0
    57 0000001D 66 ED                           		IN		AX,DX
    58 0000001F C3                              		RET
    59 00000020                                 
    60 00000020                                 _io_in32:	; int io_in32(int port);
    61 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 00000024 ED                              		IN		EAX,DX
    63 00000025 C3                              		RET
    64 00000026                                 
    65 00000026                                 _io_out8:	; void io_out8(int port, int data);
    66 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    67 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    68 0000002E EE                              		OUT		DX,AL
    69 0000002F C3                              		RET
    70 00000030                                 
    71 00000030                                 _io_out16:	; void io_out16(int port, int data);
    72 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    74 00000038 66 EF                           		OUT		DX,AX
    75 0000003A C3                              		RET
    76 0000003B                                 
    77 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    78 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    79 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    80 00000043 EF                              		OUT		DX,EAX
    81 00000044 C3                              		RET
    82 00000045                                 
    83 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    84 00000045 9C                              		PUSHFD		; PUSH EFLAGS
    85 00000046 58                              		POP		EAX
    86 00000047 C3                              		RET
    87 00000048                                 
    88 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    89 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    90 0000004C 50                              		PUSH	EAX
    91 0000004D 9D                              		POPFD		; POP EFLAGS
    92 0000004E C3                              		RET
    93 0000004F                                 
    94 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    95 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    96 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    97 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    98 0000005E C3                              		RET
    99 0000005F                                 
   100 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   101 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   102 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   103 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   104 0000006E C3                              		RET
